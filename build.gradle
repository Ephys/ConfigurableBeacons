buildscript {
    repositories {
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = "${mc_version}-${mod_version}"
group = package_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200514-1.16'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=configurablebeacons.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                configurablebeacons {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=configurablebeacons.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                configurablebeacons {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'configurablebeacons', '--all', '--output', file('src/generated/resources/')

            mods {
                configurablebeacons {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'configurablebeacons.mixins.refmap.json'
}

repositories {
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/ephys/cookiecore")
        credentials {
            username = project.findProperty("gpr.user") as String ?: System.getenv("GH_MVN_USERNAME")
            password = project.findProperty("gpr.key") as String ?: System.getenv("GH_MVN_PASSWORD")
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.108'

    // https://github.com/Ephys/CookieCore/packages/102415
    compile fg.deobf('be.ephys.cookiecore:cookiecore:1.16.1-2.9.0-fd37e68d')
}

import org.ajoberstar.grgit.Grgit

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

// Process resources on build: set the version in the mods.toml
processResources {
	// This will ensure that this task is redone when the versions change.
	inputs.property 'version', project.version

	// Replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		// Replace version
		expand('jarVersion': project.version)
	}

	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "ephys",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ephys",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Git-Hash": gitHash,
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "MixinConfigs": "configurablebeacons.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

// task signJar(type: SignJar, dependsOn: reobfJar) {
//
//     // Skips if the keyStore property is missing.
//     onlyIf {
//         project.hasProperty('mcKeyStore')
//     }
//
//     // findProperty allows us to reference the property without it existing.
//     // Using project.propName would cause the script to fail validation if
//     // the property did not exist.
//     keyStore = project.findProperty('mcKeyStore')
//     alias = project.findProperty('mcKeyStoreAlias')
//     storePass = project.findProperty('mcKeyStorePass')
//     keyPass = project.findProperty('mcKeyStoreKeyPass')
//     inputFile = jar.archivePath
//     outputFile = jar.archivePath
// }
//
// // Runs this task automatically when build is ran.
// build.dependsOn signJar
